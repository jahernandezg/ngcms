name: Deploy Frontend (Shared Hosting)

on:
  push:
    branches: [ main ]
    paths:
      - 'frontend/**'
      - 'libs/**'
      - 'package.json'
      - 'package-lock.json'
      - 'nx.json'
      - 'tsconfig.base.json'
      - '.github/workflows/deploy-frontend.yml'
  workflow_dispatch:
    inputs:
      mode:
        description: 'Deploy mode: static or ssr'
        required: false
        default: 'static'

concurrency:
  group: deploy-frontend-${{ github.ref }}
  cancel-in-progress: true

jobs:
  build-and-deploy:
    # Static deploy to shared hosting (browser assets only)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      OPENAPI_URL: ${{ vars.OPENAPI_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund --legacy-peer-deps

      - name: Generate OpenAPI types (from live API)
        run: |
          set -e
          URL="${OPENAPI_URL:-https://api.tsinit.com/api/docs-json}"
          echo "Fetching OpenAPI from $URL"
          if curl -fsSL "$URL" -o swagger.json; then
            npx openapi-typescript swagger.json --output libs/shared-types/src/lib/openapi-types.ts
          else
            echo "Warning: cannot fetch OpenAPI JSON; generating placeholder types"
            mkdir -p libs/shared-types/src/lib
            printf "export {}\n" > libs/shared-types/src/lib/openapi-types.ts
          fi

      - name: Disable openapi:all during Nx codegen (CI)
        run: |
          node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync('package.json','utf8'));p.scripts=p.scripts||{};p.scripts['openapi:all']='echo openapi generation handled explicitly in deploy-frontend';fs.writeFileSync('package.json',JSON.stringify(p,null,2));"

      - name: Build backend (necesario para swagger.json)
        run: |
          npm run build:backend
          ls -la backend || true

      - name: Generar OpenAPI y tipos (explícito/verbose)
        run: |
          set -e
          npm run openapi:build
          npm run openapi:gen
          ls -la swagger.json || true
          ls -la libs/shared-types/src/lib/openapi-types.ts || true

      - name: Build Angular frontend (static)
        run: |
          npm run build:frontend --verbose
          ls -la dist/frontend || true
          test -d dist/frontend/browser

      - name: Crear env.js (runtime config)
        shell: bash
        run: |
          set -e
          mkdir -p dist/frontend/browser
          cat > dist/frontend/browser/env.js << 'EOF'
          // Archivo generado por CI en cada deploy (clean-slate)
          // La app usa window.__env.API_BASE en tiempo de ejecución
          window.__env = {
            API_BASE: ${{ toJSON(vars.API_BASE) }}
          };
          EOF
          echo "env.js generado en dist/frontend/browser/env.js"
          ls -l dist/frontend/browser/env.js

      - name: Deploy via FTP/FTPS
        if: ${{ (github.event_name == 'workflow_dispatch' && inputs.mode != 'ssr') || (github.event_name != 'workflow_dispatch') }}
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: 'ftp'
          port: ${{ secrets.FTP_PORT || 21 }}
          server-dir: ${{ secrets.FTP_REMOTE_DIR }}
          local-dir: dist/frontend/browser/
          log-level: standard
          dry-run: false
          dangerous-clean-slate: true
          exclude: |
            **/.git*
            **/.DS_Store

  build-and-deploy-ssr:
    # Optional SSR deploy to cPanel Node.js app directory (Passenger)
    # Trigger with: workflow_dispatch -> mode=ssr
    # Or set repo variable FRONTEND_SSR_ENABLED=true to run on pushes as well
    if: ${{ (github.event_name == 'workflow_dispatch' && inputs.mode == 'ssr') || (github.event_name != 'workflow_dispatch' && vars.FRONTEND_SSR_ENABLED == 'true') }}
    runs-on: ubuntu-latest
    env:
      OPENAPI_URL: ${{ vars.OPENAPI_URL }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --no-audit --no-fund --legacy-peer-deps

      - name: Generate OpenAPI types (from live API)
        run: |
          set -e
          URL="${OPENAPI_URL:-https://api.tsinit.com/api/docs-json}"
          echo "Fetching OpenAPI from $URL"
          if curl -fsSL "$URL" -o swagger.json; then
            npx openapi-typescript swagger.json --output libs/shared-types/src/lib/openapi-types.ts
          else
            echo "Warning: cannot fetch OpenAPI JSON; generating placeholder types"
            mkdir -p libs/shared-types/src/lib
            printf "export {}\n" > libs/shared-types/src/lib/openapi-types.ts
          fi

      - name: Disable openapi:all during Nx codegen (CI)
        run: |
          node -e "const fs=require('fs');const p=JSON.parse(fs.readFileSync('package.json','utf8'));p.scripts=p.scripts||{};p.scripts['openapi:all']='echo openapi generation handled explicitly in deploy-frontend';fs.writeFileSync('package.json',JSON.stringify(p,null,2));"

      - name: Build Angular frontend (SSR)
        run: |
          npm run build:frontend:ssr
          echo 'Contenido dist/frontend:'
          ls -la dist/frontend || true
          echo 'Listando dist/frontend/server:'
          ls -la dist/frontend/server || true
          test -d dist/frontend/browser
          test -f dist/frontend/server/server.mjs || (echo 'Falta server.mjs (SSR)'; exit 1)

      - name: Create env.js (runtime config) into browser build
        shell: bash
        run: |
          set -e
          mkdir -p dist/frontend/browser
          cat > dist/frontend/browser/env.js << 'EOF'
          // Generated by CI for SSR/static runtime
          window.__env = {
            API_BASE: ${{ toJSON(vars.API_BASE) }}
          };
          EOF

      - name: Create host.mjs (Express wrapper)
        run: |
          set -e
          cat > dist/frontend/server/host.mjs <<'JS'
          import './server.mjs';
          // server.mjs proviene del build Angular SSR (main.server.ts). Si se requiere lógica
          // extra (headers, middlewares), integrar allí o usar server.ts adaptado.
          JS
          ls -l dist/frontend/server/host.mjs

      - name: Prepare SSR runtime files (app.js, package.json)
        shell: bash
        run: |
          set -e
          mkdir -p ssr_bundle/dist/frontend/server
          mkdir -p ssr_bundle/dist/frontend/browser
          cp -r dist/frontend/browser/* ssr_bundle/dist/frontend/browser/
          cp dist/frontend/server/server.mjs ssr_bundle/dist/frontend/server/server.mjs
          cp dist/frontend/server/host.mjs ssr_bundle/dist/frontend/server/host.mjs
          # Startup file expected by cPanel Passenger
          cat > ssr_bundle/app.js << 'JS'
          (async () => { await import('./dist/frontend/server/host.mjs'); })();
          JS
          # Minimal runtime package.json (dependencies resolved by cPanel NPM install)
          cat > ssr_bundle/package.json << 'JSON'
          {
            "name": "frontend-ssr-runtime",
            "private": true,
            "type": "module",
            "engines": { "node": ">=18" },
            "dependencies": {
              "@angular/ssr": "~20.1.0",
              "express": "^4.21.2"
            }
          }
          JSON

      - name: Deploy SSR bundle via FTP/FTPS
        uses: SamKirkland/FTP-Deploy-Action@v4.3.5
        with:
          server: ${{ secrets.FTP_HOST }}
          username: ${{ secrets.FTP_USERNAME }}
          password: ${{ secrets.FTP_PASSWORD }}
          protocol: 'ftp'
          port: ${{ secrets.FTP_PORT || 21 }}
          server-dir: ${{ secrets.FTP_REMOTE_DIR_SSR }}
          local-dir: ssr_bundle/
          log-level: standard
          dry-run: false
          dangerous-clean-slate: true
          exclude: |
            **/.git*
            **/.DS_Store
