name: Deploy

on:
  push:
    branches:
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  GHCR_PAT: ${{ secrets.GHCR_PAT }}
  GHCR_USER: ${{ secrets.GHCR_USER || github.actor }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: tools/docker/Dockerfile.backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

      - name: Persist image tags
        id: meta
        run: |
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          source: |
            docker-compose.deploy.yml
          target: ${{ secrets.DEPLOY_PATH }}

      - name: Deploy via SSH (backend only)
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          script_stop: true
          envs: GITHUB_ACTOR,GHCR_PAT,GHCR_USER
          script: |
            set -e
            cd ${{ secrets.DEPLOY_PATH }}

            # Login GHCR para pulls privados (no interactivo)
            if [ -z "${GHCR_PAT}" ]; then echo "Falta secreto GHCR_PAT" >&2; exit 1; fi
            USER_FOR_GHCR="${GHCR_USER:-${GITHUB_ACTOR}}"
            echo "Autenticando en ghcr.io como ${USER_FOR_GHCR}"
            echo "${GHCR_PAT}" | docker login ghcr.io -u "${USER_FOR_GHCR}" --password-stdin

            # Imagen backend a usar por compose
            export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

            # Elegir comando compose disponible
            if command -v docker-compose >/dev/null 2>&1; then DC="docker-compose"; else DC="docker compose"; fi

            # Pull y arranque DB
            $DC -f docker-compose.deploy.yml pull db backend || true
            $DC -f docker-compose.deploy.yml up -d db

            echo "Esperando DB saludable..."
            for i in $(seq 1 60); do
              if $DC -f docker-compose.deploy.yml exec -T db pg_isready -U ${POSTGRES_USER:-postgres} ; then echo "DB lista"; break; fi; sleep 2; done

            echo "Prisma migrate deploy..."
            BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f docker-compose.deploy.yml run --rm backend npx prisma migrate deploy --schema=/app/prisma/schema.prisma

            echo "Verificando necesidad de seed..."
            NEED_SEED=$($DC -f docker-compose.deploy.yml exec -T db psql -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-cms} -tAc "SELECT CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name='User') THEN (SELECT CASE WHEN (SELECT COUNT(*) FROM \"User\")=0 THEN 'yes' ELSE 'no' END) ELSE 'yes' END;")
            if [ "$NEED_SEED" = "yes" ]; then
              echo "Prisma db seed..."
              BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f docker-compose.deploy.yml run --rm backend npx prisma db seed --schema=/app/prisma/schema.prisma
            else
              echo "Seed no necesario."
            fi

            # Levantar backend
            BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f docker-compose.deploy.yml up -d db backend
            docker image prune -f || true
