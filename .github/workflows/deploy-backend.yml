name: Deploy Backend (VPS)

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'libs/**'
      - 'tools/docker/**'
      - 'docker-compose.deploy.yml'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/deploy-backend.yml'

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  # GHCR PAT para docker login en el VPS
  GHCR_PAT: ${{ secrets.GHCR_PAT }}
  # Usuario para ghcr (si tu PAT es de otra cuenta/owner)
  GHCR_USER: ${{ secrets.GHCR_USER || github.actor }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: tools/docker/Dockerfile.backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

      - name: Persist image tags
        id: meta
        run: |
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Comprobación previa de conectividad SSH
        shell: bash
        run: |
          set -e
          HOST="${{ secrets.DEPLOY_HOST }}"
          PORT="${{ secrets.DEPLOY_PORT }}"
          if [ -z "$PORT" ]; then PORT=22; fi
          echo "Verificando conexión a $HOST:$PORT"
          timeout 10 bash -lc "cat < /dev/null > /dev/tcp/$HOST/$PORT" && echo "OK" || (echo "No se puede conectar a $HOST:$PORT" && exit 1)

      - name: Ensure deploy path exists
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script_stop: true
          script: |
            mkdir -p "${{ secrets.DEPLOY_PATH }}"

      - name: Copy backend compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          source: |
            docker-compose.backend.deploy.yml
          target: ${{ secrets.DEPLOY_PATH }}

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script_stop: true
          envs: GHCR_PAT,GHCR_USER,GITHUB_ACTOR
          script: |
            set -euo pipefail
            cd ${{ secrets.DEPLOY_PATH }}

            # Validar .env presente y variables mínimas
            if [ ! -f .env ]; then
              echo "ERROR: Falta archivo .env en $PWD" >&2
              echo "Cree un .env con al menos: POSTGRES_USER, POSTGRES_PASSWORD, POSTGRES_DB" >&2
              echo "Además, configure API_URL si su frontend lo requiere." >&2
              exit 1
            fi
            sed -i 's/\r$//' .env || true

            # Docker login en GHCR para pulls privados (usar GHCR_USER si está definido, si no GITHUB_ACTOR)
            if [ -z "${GHCR_PAT}" ]; then echo "Falta secreto GHCR_PAT" >&2; exit 1; fi
            USER_FOR_GHCR="${GHCR_USER:-${GITHUB_ACTOR}}"
            echo "Autenticando en ghcr.io como ${USER_FOR_GHCR}"
            echo "${GHCR_PAT}" | docker login ghcr.io -u "${USER_FOR_GHCR}" --password-stdin

            # Definir la imagen de backend para sustitución de variables en compose
            export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

            # Archivo compose backend-only
            COMPOSE_FILE=docker-compose.backend.deploy.yml

            # Forzar nombre de proyecto para evitar redes ambiguas (tsinit_default duplicadas)
            export COMPOSE_PROJECT_NAME=tsinit

            # Detectar comando compose disponible
            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            elif docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            else
              echo "Error: ni 'docker-compose' ni 'docker compose' disponibles" >&2
              exit 1
            fi

            # Pull de servicios necesarios
            $DC -f $COMPOSE_FILE pull db backend || true

            # DB primero
            # Limpiar redes antiguas ambiguas antes de subir
            for net in $(docker network ls --format '{{.Name}}' | grep '^tsinit_default$' || true); do
              echo "Eliminando red antigua $net"; docker network rm "$net" || true; done
            $DC -f $COMPOSE_FILE up -d db
            echo "Esperando DB saludable..."
            for i in $(seq 1 90); do
              if $DC -f $COMPOSE_FILE exec -T db pg_isready -U ${POSTGRES_USER:-postgres} ; then echo "DB lista"; break; fi; sleep 2; done

            # Migraciones y seed opcional usando Prisma (evitar dependencia de psql/tabla exacta)
            echo "Prisma migrate deploy..."
            BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f $COMPOSE_FILE run --rm backend npx prisma migrate deploy --schema=/app/prisma/schema.prisma

            echo "Verificando necesidad de seed (Prisma)..."
            NEED_SEED=$($DC -f $COMPOSE_FILE run --rm -e NODE_ENV=production backend node -e '
              const { PrismaClient } = require("@prisma/client");
              const p = new PrismaClient();
              (async () => {
                try {
                  let need = "yes";
                  const count = await p.user.count().catch(() => -1);
                  if (count > 0) need = "no";
                  else if (count === 0) need = "yes";
                  process.stdout.write(need);
                } catch(e) { process.stdout.write("yes"); }
                finally { await p.$disconnect(); }
              })();
            ' 2>/dev/null || echo yes)
            echo "NEED_SEED=$NEED_SEED"
            if [ "$NEED_SEED" = "yes" ]; then
              echo "Prisma db seed..."
              BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f $COMPOSE_FILE run --rm backend npx prisma db seed --schema=/app/prisma/schema.prisma || { echo "Seed falló" >&2; exit 1; }
            else
              echo "Seed no necesario."
            fi

            # Levantar/actualizar backend solamente
            BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f $COMPOSE_FILE up -d db backend
            docker image prune -f || true

            echo "Verificando health del backend..."
            HEALTH_OK=false
            for i in $(seq 1 30); do
              if curl -fsS http://localhost:3000/api/health > /dev/null; then
                echo "Health OK en intento $i"; HEALTH_OK=true; break; fi
              sleep 2
            done

            if [ "$HEALTH_OK" = false ]; then
              echo "[ERROR] Backend no saludable tras despliegue. Obteniendo logs..." >&2
              $DC -f $COMPOSE_FILE logs --tail=200 backend || true
              echo "Intentando rollback a imagen :latest" >&2
              ROLLBACK_IMAGE=${BACKEND_IMAGE%:*}:latest
              export BACKEND_IMAGE="$ROLLBACK_IMAGE"
              BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f $COMPOSE_FILE pull backend || true
              BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f $COMPOSE_FILE up -d backend
              echo "Reverificando health tras rollback..."
              for i in $(seq 1 30); do
                if curl -fsS http://localhost:3000/api/health > /dev/null; then
                  echo "Rollback exitoso, backend estable con :latest"; exit 0; fi
                sleep 2
              done
              echo "[FATAL] Backend sigue sin responder tras rollback" >&2
              exit 1
            fi

            echo "Despliegue backend completado con éxito (health OK)."
