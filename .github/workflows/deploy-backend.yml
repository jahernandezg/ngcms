name: Deploy Backend (VPS)

on:
  push:
    branches: [ main ]
    paths:
      - 'backend/**'
      - 'libs/**'
      - 'tools/docker/**'
      - 'docker-compose.deploy.yml'
      - 'package.json'
      - 'package-lock.json'
      - '.github/workflows/deploy-backend.yml'

concurrency:
  group: deploy-backend-${{ github.ref }}
  cancel-in-progress: true

env:
  REGISTRY: ghcr.io
  IMAGE_NAME_BACKEND: ${{ github.repository }}-backend
  # GHCR PAT para docker login en el VPS
  GHCR_PAT: ${{ secrets.GHCR_PAT }}

jobs:
  build-and-push:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to GHCR
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push backend image
        uses: docker/build-push-action@v6
        with:
          context: .
          file: tools/docker/Dockerfile.backend
          push: true
          tags: |
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:latest
            ${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

      - name: Persist image tags
        id: meta
        run: |
          echo "BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}" >> $GITHUB_OUTPUT

  deploy:
    needs: build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Comprobaci칩n previa de conectividad SSH
        shell: bash
        run: |
          set -e
          HOST="${{ secrets.DEPLOY_HOST }}"
          PORT="${{ secrets.DEPLOY_PORT }}"
          if [ -z "$PORT" ]; then PORT=22; fi
          echo "Verificando conexi칩n a $HOST:$PORT"
          timeout 10 bash -lc "cat < /dev/null > /dev/tcp/$HOST/$PORT" && echo "OK" || (echo "No se puede conectar a $HOST:$PORT" && exit 1)

      - name: Ensure deploy path exists
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script_stop: true
          script: |
            mkdir -p "${{ secrets.DEPLOY_PATH }}"

      - name: Copy compose to server
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          source: |
            docker-compose.deploy.yml
          target: ${{ secrets.DEPLOY_PATH }}

      - name: Deploy via SSH
        uses: appleboy/ssh-action@v1.2.0
        with:
          host: ${{ secrets.DEPLOY_HOST }}
          username: ${{ secrets.DEPLOY_USER }}
          key: ${{ secrets.DEPLOY_SSH_KEY }}
          port: ${{ secrets.DEPLOY_PORT || 22 }}
          script_stop: true
          envs: GHCR_PAT,GITHUB_ACTOR
          script: |
            set -e
            cd ${{ secrets.DEPLOY_PATH }}
            # Docker login en GHCR para pulls privados (usar GHCR_USER si est치 definido, si no GITHUB_ACTOR)
            if [ -z "${GHCR_PAT}" ]; then echo "Falta secreto GHCR_PAT" >&2; exit 1; fi
            USER_FOR_GHCR="${GHCR_USER:-${GITHUB_ACTOR}}"
            echo "Autenticando en ghcr.io como ${USER_FOR_GHCR}"
            echo "${GHCR_PAT}" | docker login ghcr.io -u "${USER_FOR_GHCR}" --password-stdin
            # Definir la imagen de backend para sustituci칩n de variables en compose
            export BACKEND_IMAGE=${{ env.REGISTRY }}/${{ env.IMAGE_NAME_BACKEND }}:${{ github.sha }}

            # Normalizar EOL por si .env tiene CRLF (Windows)
            [ -f .env ] && sed -i 's/\r$//' .env || true

            # Detectar comando compose disponible
            if command -v docker-compose >/dev/null 2>&1; then
              DC="docker-compose"
            elif docker compose version >/dev/null 2>&1; then
              DC="docker compose"
            else
              echo "Error: ni 'docker-compose' ni 'docker compose' disponibles" >&2
              exit 1
            fi

            # Pull de servicios necesarios
            $DC -f docker-compose.deploy.yml pull db backend || true

            # DB primero
            $DC -f docker-compose.deploy.yml up -d db
            echo "Esperando DB saludable..."
            for i in $(seq 1 60); do
              if $DC -f docker-compose.deploy.yml exec -T db pg_isready -U ${POSTGRES_USER:-postgres} ; then
                echo "DB lista"; break; fi; sleep 2; done

            # Migraciones y seed opcional
            echo "Prisma migrate deploy..."
            BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f docker-compose.deploy.yml run --rm backend npx prisma migrate deploy --schema=/app/prisma/schema.prisma
            echo "Verificando necesidad de seed..."
            NEED_SEED=$($DC -f docker-compose.deploy.yml exec -T db psql -U ${POSTGRES_USER:-postgres} -d ${POSTGRES_DB:-cms} -tAc "SELECT CASE WHEN EXISTS (SELECT 1 FROM information_schema.tables WHERE table_name='User') THEN (SELECT CASE WHEN (SELECT COUNT(*) FROM \"User\")=0 THEN 'yes' ELSE 'no' END) ELSE 'yes' END;")
            if [ "$NEED_SEED" = "yes" ]; then
              echo "Prisma db seed..."
              BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f docker-compose.deploy.yml run --rm backend npx prisma db seed --schema=/app/prisma/schema.prisma
            else
              echo "Seed no necesario."
            fi

            # Levantar/actualizar backend solamente
            BACKEND_IMAGE="$BACKEND_IMAGE" $DC -f docker-compose.deploy.yml up -d db backend
            docker image prune -f || true
