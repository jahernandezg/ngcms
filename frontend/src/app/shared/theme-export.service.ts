import { Injectable } from '@angular/core';
import { ActiveTheme } from './theme.service';
import { ThemeAnimations, AnimationEngineService } from './animation-engine.service';

export interface ExportOptions {
  includeAnimations: boolean;
  includeCustomProperties: boolean;
  includeUtilities: boolean;
  includeComponents: boolean;
  minify: boolean;
  format: 'css' | 'scss' | 'less';
}

export interface ThemeExport {
  theme: ActiveTheme;
  animations?: ThemeAnimations;
  css: string;
  metadata: {
    exportedAt: Date;
    version: string;
    options: ExportOptions;
  };
}

@Injectable({
  providedIn: 'root'
})
export class ThemeExportService {

  constructor(private animationEngine: AnimationEngineService) {}

  /**
   * Export theme as CSS
   */
  exportThemeCSS(theme: ActiveTheme, options: ExportOptions): ThemeExport {
    const css = this.generateThemeCSS(theme, options);
    
    const themeExport: ThemeExport = {
      theme,
      css,
      metadata: {
        exportedAt: new Date(),
        version: '1.0.0',
        options
      }
    };

    if (options.includeAnimations) {
      themeExport.animations = this.animationEngine.currentAnimations();
    }

    return themeExport;
  }

  /**
   * Download theme as CSS file
   */
  downloadThemeCSS(theme: ActiveTheme, options: ExportOptions, filename?: string) {
    const themeExport = this.exportThemeCSS(theme, options);
    
    const blob = new Blob([themeExport.css], { type: 'text/css' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = filename || `${theme.name.toLowerCase().replace(/\s+/g, '-')}-theme.css`;
    a.click();
    
    URL.revokeObjectURL(url);
  }

  /**
   * Download theme package (CSS + JSON config)
   */
  downloadThemePackage(theme: ActiveTheme, options: ExportOptions) {
    const themeExport = this.exportThemeCSS(theme, options);
    
    // Create package with CSS and configuration
    const packageData = {
      'theme.css': themeExport.css,
      'theme-config.json': JSON.stringify(themeExport, null, 2),
      'README.md': this.generateReadme(theme, options)
    };

    // Create ZIP-like structure using tar-like format
    const packageContent = this.createPackageContent(packageData);
    
    const blob = new Blob([packageContent], { type: 'application/json' });
    const url = URL.createObjectURL(blob);
    
    const a = document.createElement('a');
    a.href = url;
    a.download = `${theme.name.toLowerCase().replace(/\s+/g, '-')}-theme-package.json`;
    a.click();
    
    URL.revokeObjectURL(url);
  }

  /**
   * Generate complete theme CSS
   */
  private generateThemeCSS(theme: ActiveTheme, options: ExportOptions): string {
    let css = '';
    
    // Header comment
    css += this.generateCSSHeader(theme);
    
    // CSS Custom Properties (CSS Variables)
    if (options.includeCustomProperties) {
      css += this.generateCustomProperties(theme);
    }
    
    // Base styles
    css += this.generateBaseStyles(theme);
    
    // Component styles
    if (options.includeComponents) {
      css += this.generateComponentStyles(theme);
    }
    
    // Utility classes
    if (options.includeUtilities) {
      css += this.generateUtilityClasses(theme);
    }
    
    // Animations
    if (options.includeAnimations) {
      css += this.generateAnimationStyles();
    }
    
    // Responsive styles
    css += this.generateResponsiveStyles(theme);
    
    // Minify if requested
    if (options.minify) {
      css = this.minifyCSS(css);
    }
    
    return css;
  }

  /**
   * Generate CSS header comment
   */
  private generateCSSHeader(theme: ActiveTheme): string {
    const date = new Date().toLocaleDateString();
    return `/*
 * ${theme.name} Theme
 * Generated by CMS Theme System
 * Date: ${date}
 * 
 * This file contains all the styles for the ${theme.name} theme.
 * You can customize these values or use them as CSS custom properties.
 */

`;
  }

  /**
   * Generate CSS custom properties
   */
  private generateCustomProperties(theme: ActiveTheme): string {
    return `:root {
  /* Colors */
  --theme-primary: ${theme.primaryColor || '#3b82f6'};
  --theme-secondary: ${theme.secondaryColor || '#64748b'};
  --theme-accent: ${theme.accentColor || '#f59e0b'};
  --theme-background: ${theme.backgroundColor || '#ffffff'};
  --theme-surface: ${theme.surfaceColor || '#f8fafc'};
  --theme-surface-alt: ${theme.surfaceAltColor || '#f1f5f9'};
  --theme-text: ${theme.textColor || '#1e293b'};
  --theme-text-secondary: ${theme.textSecondary || '#64748b'};
  --theme-border: ${theme.borderColor || '#e2e8f0'};
  --theme-error: ${theme.errorColor || '#ef4444'};
  --theme-success: ${theme.successColor || '#22c55e'};
  --theme-warning: ${theme.warningColor || '#f59e0b'};

  /* Typography */
  --theme-font-heading: ${theme.fontHeading ? `'${theme.fontHeading}', sans-serif` : 'system-ui, sans-serif'};
  --theme-font-body: ${theme.fontBody ? `'${theme.fontBody}', sans-serif` : 'system-ui, sans-serif'};
  --theme-font-size-base: ${theme.fontSizeBase || '16px'};
  --theme-font-scale-ratio: ${theme.fontScaleRatio || '1.25'};
  --theme-line-height-base: ${theme.lineHeightBase || '1.6'};

  /* Layout */
  --theme-container-width: ${theme.containerWidth || '1200px'};
  --theme-border-radius: ${theme.borderRadius || '8px'};
  --theme-spacing-unit: ${theme.spacingUnit || '1rem'};

  /* Computed values */
  --theme-spacing-xs: calc(var(--theme-spacing-unit) * 0.25);
  --theme-spacing-sm: calc(var(--theme-spacing-unit) * 0.5);
  --theme-spacing-md: var(--theme-spacing-unit);
  --theme-spacing-lg: calc(var(--theme-spacing-unit) * 1.5);
  --theme-spacing-xl: calc(var(--theme-spacing-unit) * 2);
  --theme-spacing-2xl: calc(var(--theme-spacing-unit) * 3);

  --theme-font-size-xs: calc(var(--theme-font-size-base) / var(--theme-font-scale-ratio) / var(--theme-font-scale-ratio));
  --theme-font-size-sm: calc(var(--theme-font-size-base) / var(--theme-font-scale-ratio));
  --theme-font-size-md: var(--theme-font-size-base);
  --theme-font-size-lg: calc(var(--theme-font-size-base) * var(--theme-font-scale-ratio));
  --theme-font-size-xl: calc(var(--theme-font-size-base) * var(--theme-font-scale-ratio) * var(--theme-font-scale-ratio));
  --theme-font-size-2xl: calc(var(--theme-font-size-base) * var(--theme-font-scale-ratio) * var(--theme-font-scale-ratio) * var(--theme-font-scale-ratio));
  --theme-font-size-3xl: calc(var(--theme-font-size-base) * var(--theme-font-scale-ratio) * var(--theme-font-scale-ratio) * var(--theme-font-scale-ratio) * var(--theme-font-scale-ratio));
}

`;
  }

  /**
   * Generate base styles
   */
  private generateBaseStyles(theme: ActiveTheme): string {
    return `/* Base Styles */
body {
  font-family: var(--theme-font-body);
  font-size: var(--theme-font-size-base);
  line-height: var(--theme-line-height-base);
  color: var(--theme-text);
  background-color: var(--theme-background);
  margin: 0;
  padding: 0;
}

h1, h2, h3, h4, h5, h6 {
  font-family: var(--theme-font-heading);
  color: var(--theme-text);
  margin: 0 0 var(--theme-spacing-md) 0;
  line-height: 1.2;
}

h1 { font-size: var(--theme-font-size-3xl); }
h2 { font-size: var(--theme-font-size-2xl); }
h3 { font-size: var(--theme-font-size-xl); }
h4 { font-size: var(--theme-font-size-lg); }
h5 { font-size: var(--theme-font-size-md); }
h6 { font-size: var(--theme-font-size-sm); }

p {
  margin: 0 0 var(--theme-spacing-md) 0;
  color: var(--theme-text);
}

a {
  color: var(--theme-primary);
  text-decoration: none;
  transition: color 0.2s ease;
}

a:hover {
  color: var(--theme-accent);
}

/* Container */
.theme-container {
  max-width: var(--theme-container-width);
  margin: 0 auto;
  padding: 0 var(--theme-spacing-md);
}

@media (max-width: 768px) {
  .theme-container {
    padding: 0 var(--theme-spacing-sm);
  }
}

`;
  }

  /**
   * Generate component styles
   */
  private generateComponentStyles(theme: ActiveTheme): string {
    return `/* Component Styles */

/* Buttons */
.theme-button {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  padding: var(--theme-spacing-sm) var(--theme-spacing-lg);
  font-size: var(--theme-font-size-md);
  font-weight: 500;
  border: 2px solid var(--theme-primary);
  background: var(--theme-primary);
  color: white;
  cursor: pointer;
  transition: all 0.2s ease;
  text-decoration: none;
  ${this.getButtonStyleCSS(theme.buttonStyle || 'ROUNDED')}
}

.theme-button:hover {
  background: var(--theme-accent);
  border-color: var(--theme-accent);
  transform: translateY(-1px);
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
}

.theme-button-secondary {
  background: transparent;
  color: var(--theme-primary);
}

.theme-button-secondary:hover {
  background: var(--theme-primary);
  color: white;
}

/* Cards */
.theme-card {
  background: var(--theme-surface);
  border: 1px solid var(--theme-border);
  padding: var(--theme-spacing-lg);
  transition: all 0.2s ease;
  ${this.getCardStyleCSS(theme.cardStyle || 'ELEVATED')}
}

.theme-card:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(0, 0, 0, 0.1);
}

/* Forms */
.theme-input,
.theme-textarea,
.theme-select {
  width: 100%;
  padding: var(--theme-spacing-sm) var(--theme-spacing-md);
  border: 2px solid var(--theme-border);
  border-radius: var(--theme-border-radius);
  font-size: var(--theme-font-size-md);
  font-family: var(--theme-font-body);
  background: var(--theme-background);
  color: var(--theme-text);
  transition: border-color 0.2s ease;
}

.theme-input:focus,
.theme-textarea:focus,
.theme-select:focus {
  outline: none;
  border-color: var(--theme-primary);
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

/* Navigation */
.theme-nav {
  background: var(--theme-surface);
  border-bottom: 1px solid var(--theme-border);
  padding: var(--theme-spacing-md) 0;
}

.theme-nav-link {
  color: var(--theme-text);
  padding: var(--theme-spacing-sm) var(--theme-spacing-md);
  border-radius: var(--theme-border-radius);
  transition: all 0.2s ease;
}

.theme-nav-link:hover,
.theme-nav-link.active {
  background: var(--theme-primary);
  color: white;
}

/* Alerts */
.theme-alert {
  padding: var(--theme-spacing-md);
  border-radius: var(--theme-border-radius);
  border-left: 4px solid;
  margin-bottom: var(--theme-spacing-md);
}

.theme-alert-success {
  background: rgba(34, 197, 94, 0.1);
  border-color: var(--theme-success);
  color: #166534;
}

.theme-alert-warning {
  background: rgba(245, 158, 11, 0.1);
  border-color: var(--theme-warning);
  color: #92400e;
}

.theme-alert-error {
  background: rgba(239, 68, 68, 0.1);
  border-color: var(--theme-error);
  color: #991b1b;
}

/* Tables */
.theme-table {
  width: 100%;
  border-collapse: collapse;
  background: var(--theme-surface);
  border-radius: var(--theme-border-radius);
  overflow: hidden;
  box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
}

.theme-table th,
.theme-table td {
  padding: var(--theme-spacing-md);
  text-align: left;
  border-bottom: 1px solid var(--theme-border);
}

.theme-table th {
  background: var(--theme-surface-alt);
  font-weight: 600;
  color: var(--theme-text);
}

.theme-table tr:hover {
  background: var(--theme-surface-alt);
}

`;
  }

  /**
   * Generate utility classes
   */
  private generateUtilityClasses(theme: ActiveTheme): string {
    return `/* Utility Classes */

/* Spacing */
.theme-m-0 { margin: 0; }
.theme-m-1 { margin: var(--theme-spacing-xs); }
.theme-m-2 { margin: var(--theme-spacing-sm); }
.theme-m-3 { margin: var(--theme-spacing-md); }
.theme-m-4 { margin: var(--theme-spacing-lg); }
.theme-m-5 { margin: var(--theme-spacing-xl); }

.theme-p-0 { padding: 0; }
.theme-p-1 { padding: var(--theme-spacing-xs); }
.theme-p-2 { padding: var(--theme-spacing-sm); }
.theme-p-3 { padding: var(--theme-spacing-md); }
.theme-p-4 { padding: var(--theme-spacing-lg); }
.theme-p-5 { padding: var(--theme-spacing-xl); }

/* Colors */
.theme-text-primary { color: var(--theme-primary); }
.theme-text-secondary { color: var(--theme-text-secondary); }
.theme-text-success { color: var(--theme-success); }
.theme-text-warning { color: var(--theme-warning); }
.theme-text-error { color: var(--theme-error); }

.theme-bg-primary { background-color: var(--theme-primary); }
.theme-bg-surface { background-color: var(--theme-surface); }
.theme-bg-surface-alt { background-color: var(--theme-surface-alt); }

/* Typography */
.theme-text-xs { font-size: var(--theme-font-size-xs); }
.theme-text-sm { font-size: var(--theme-font-size-sm); }
.theme-text-md { font-size: var(--theme-font-size-md); }
.theme-text-lg { font-size: var(--theme-font-size-lg); }
.theme-text-xl { font-size: var(--theme-font-size-xl); }
.theme-text-2xl { font-size: var(--theme-font-size-2xl); }

.theme-font-heading { font-family: var(--theme-font-heading); }
.theme-font-body { font-family: var(--theme-font-body); }

.theme-text-center { text-align: center; }
.theme-text-left { text-align: left; }
.theme-text-right { text-align: right; }

/* Display */
.theme-hidden { display: none; }
.theme-block { display: block; }
.theme-inline { display: inline; }
.theme-inline-block { display: inline-block; }
.theme-flex { display: flex; }
.theme-grid { display: grid; }

/* Flexbox */
.theme-flex-center {
  display: flex;
  align-items: center;
  justify-content: center;
}

.theme-flex-between {
  display: flex;
  justify-content: space-between;
}

.theme-flex-col { flex-direction: column; }
.theme-flex-wrap { flex-wrap: wrap; }
.theme-items-center { align-items: center; }
.theme-justify-center { justify-content: center; }

/* Borders */
.theme-border { border: 1px solid var(--theme-border); }
.theme-border-t { border-top: 1px solid var(--theme-border); }
.theme-border-b { border-bottom: 1px solid var(--theme-border); }
.theme-border-l { border-left: 1px solid var(--theme-border); }
.theme-border-r { border-right: 1px solid var(--theme-border); }

.theme-rounded { border-radius: var(--theme-border-radius); }
.theme-rounded-lg { border-radius: calc(var(--theme-border-radius) * 1.5); }
.theme-rounded-full { border-radius: 9999px; }

/* Shadows */
.theme-shadow { ${this.getShadowCSS(theme.shadowStyle || 'SOFT')} }

`;
  }

  /**
   * Generate animation styles
   */
  private generateAnimationStyles(): string {
    return this.animationEngine.generateAnimationCSS();
  }

  /**
   * Generate responsive styles
   */
  private generateResponsiveStyles(theme: ActiveTheme): string {
    return `/* Responsive Styles */

@media (max-width: 640px) {
  .theme-text-responsive {
    font-size: var(--theme-font-size-sm);
  }
  
  .theme-p-responsive {
    padding: var(--theme-spacing-sm);
  }
  
  .theme-container {
    padding: 0 var(--theme-spacing-sm);
  }
}

@media (min-width: 641px) and (max-width: 1024px) {
  .theme-container {
    padding: 0 var(--theme-spacing-md);
  }
}

@media (min-width: 1025px) {
  .theme-text-responsive-lg {
    font-size: var(--theme-font-size-lg);
  }
}

/* Print styles */
@media print {
  .theme-no-print {
    display: none;
  }
  
  body {
    background: white;
    color: black;
  }
  
  .theme-card {
    border: 1px solid #ccc;
    box-shadow: none;
  }
}

`;
  }

  /**
   * Get button style specific CSS
   */
  private getButtonStyleCSS(style: string): string {
    switch (style) {
      case 'ROUNDED':
        return 'border-radius: var(--theme-border-radius);';
      case 'SQUARE':
        return 'border-radius: 0;';
      case 'PILL':
        return 'border-radius: 9999px;';
      case 'OUTLINED':
        return `border-radius: var(--theme-border-radius);`;
      case 'GHOST':
        return `border-radius: var(--theme-border-radius); background: transparent; color: var(--theme-primary);`;
      default:
        return 'border-radius: var(--theme-border-radius);';
    }
  }

  /**
   * Get card style specific CSS
   */
  private getCardStyleCSS(style: string): string {
    switch (style) {
      case 'ELEVATED':
        return `border-radius: var(--theme-border-radius); box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);`;
      case 'FLAT':
        return 'border-radius: var(--theme-border-radius); box-shadow: none;';
      case 'OUTLINED':
        return `border-radius: var(--theme-border-radius); box-shadow: none; border: 2px solid var(--theme-border);`;
      case 'MINIMAL':
        return 'border-radius: 0; box-shadow: none; border: none;';
      case 'GLASS':
        return `border-radius: var(--theme-border-radius); backdrop-filter: blur(10px); background: rgba(255, 255, 255, 0.8);`;
      default:
        return `border-radius: var(--theme-border-radius); box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);`;
    }
  }

  /**
   * Get shadow style CSS
   */
  private getShadowCSS(style: string): string {
    switch (style) {
      case 'NONE':
        return 'box-shadow: none;';
      case 'SOFT':
        return 'box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);';
      case 'MEDIUM':
        return 'box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);';
      case 'STRONG':
        return 'box-shadow: 0 8px 25px rgba(0, 0, 0, 0.25);';
      case 'COLORED':
        return 'box-shadow: 0 4px 12px rgba(59, 130, 246, 0.3);';
      default:
        return 'box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);';
    }
  }

  /**
   * Minify CSS
   */
  private minifyCSS(css: string): string {
    return css
      .replace(/\/\*[\s\S]*?\*\//g, '') // Remove comments
      .replace(/\s+/g, ' ') // Replace multiple spaces with single space
      .replace(/;\s*}/g, '}') // Remove last semicolon in blocks
      .replace(/\s*{\s*/g, '{') // Remove spaces around opening braces
      .replace(/\s*}\s*/g, '}') // Remove spaces around closing braces
      .replace(/\s*;\s*/g, ';') // Remove spaces around semicolons
      .replace(/\s*,\s*/g, ',') // Remove spaces around commas
      .replace(/\s*:\s*/g, ':') // Remove spaces around colons
      .trim();
  }

  /**
   * Generate README file
   */
  private generateReadme(theme: ActiveTheme, options: ExportOptions): string {
    return `# ${theme.name} Theme

Generated on ${new Date().toLocaleDateString()}

## Description
${theme.description || 'Custom theme generated by CMS Theme System'}

## Files Included
- \`theme.css\` - The complete theme stylesheet
- \`theme-config.json\` - Complete theme configuration
- \`README.md\` - This file

## Usage

### Basic Usage
Include the CSS file in your HTML:

\`\`\`html
<link rel="stylesheet" href="theme.css">
\`\`\`

### CSS Custom Properties
This theme uses CSS custom properties (variables) for easy customization:

\`\`\`css
:root {
  --theme-primary: ${theme.primaryColor};
  --theme-secondary: ${theme.secondaryColor};
  /* ... other variables */
}
\`\`\`

### Component Classes
The theme includes ready-to-use component classes:

- \`.theme-button\` - Primary button style
- \`.theme-card\` - Card component
- \`.theme-input\` - Form input style
- \`.theme-nav\` - Navigation bar

### Utility Classes
Utility classes for common styling needs:

- Spacing: \`.theme-m-1\`, \`.theme-p-2\`, etc.
- Colors: \`.theme-text-primary\`, \`.theme-bg-surface\`, etc.
- Typography: \`.theme-text-lg\`, \`.theme-font-heading\`, etc.

## Customization
You can customize this theme by overriding the CSS custom properties or modifying the CSS file directly.

## Export Options
This theme was exported with the following options:
- Include Animations: ${options.includeAnimations ? 'Yes' : 'No'}
- Include Custom Properties: ${options.includeCustomProperties ? 'Yes' : 'No'}
- Include Utilities: ${options.includeUtilities ? 'Yes' : 'No'}
- Include Components: ${options.includeComponents ? 'Yes' : 'No'}
- Minified: ${options.minify ? 'Yes' : 'No'}
- Format: ${options.format.toUpperCase()}

## Support
For support and documentation, visit the CMS Theme System documentation.
`;
  }

  /**
   * Create package content
   */
  private createPackageContent(files: Record<string, string>): string {
    return JSON.stringify({
      name: 'theme-package',
      version: '1.0.0',
      description: 'Exported theme package',
      files: files,
      generated: new Date().toISOString()
    }, null, 2);
  }
}