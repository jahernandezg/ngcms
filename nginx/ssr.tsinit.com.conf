# Nginx vhost for Angular SSR front-end (subdomain)
# Domain: ssr.tsinit.com
# Upstream SSR app: Node/Express server (server.mjs) listening on 127.0.0.1:4000 by default
#
# Notes:
# - Adjust proxy_pass to the correct host:port where your SSR container/process listens.
#   If running in Docker on the same host but different network, consider using 172.17.0.1:4000
#   or the docker-compose service name with an upstream block.
# - TLS cert/key directives are placeholders if you manage certs manually.
#   If you use certbot --nginx, it will inject the ssl_certificate lines automatically.
# - The proxy headers ensure SSR builds absolute URLs (og:url, canonical) using your domain.

# HTTP -> HTTPS redirect
server {
    listen 80;
    listen [::]:80;
    server_name ssr.tsinit.com;
    # If you terminate TLS on another layer (Cloudflare), you can remove this redirect
    return 301 https://$host$request_uri;
}

# HTTPS server (replace cert paths if managed manually; otherwise let certbot manage)
server {
    listen 443 ssl http2;
    listen [::]:443 ssl http2;
    server_name ssr.tsinit.com;

    # ssl_certificate     /etc/letsencrypt/live/ssr.tsinit.com/fullchain.pem;
    # ssl_certificate_key /etc/letsencrypt/live/ssr.tsinit.com/privkey.pem;

    # Recommended proxy settings
    proxy_http_version 1.1;
    proxy_buffering on;
    proxy_buffers 16 32k;
    proxy_busy_buffers_size 64k;
    proxy_read_timeout 60s;
    proxy_connect_timeout 5s;
    proxy_send_timeout 60s;

    # Security headers (adjust to your policy)
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-Frame-Options "SAMEORIGIN" always;
    add_header Referrer-Policy "no-referrer-when-downgrade" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;

    # Gzip for text responses
    gzip on;
    gzip_types text/plain text/css application/json application/javascript text/xml application/xml application/xml+rss text/javascript image/svg+xml;
    gzip_min_length 256;

    # Optionally long-cache static assets served via SSR (Angular outputs hashed filenames)
    # This relies on upstream setting Cache-Control, but we can also force here if desired.
    location ~* \.(?:js|css|png|jpg|jpeg|gif|svg|webp|ico|woff2?)$ {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://127.0.0.1:4000;
        # Uncomment to force long cache regardless of upstream
        # expires 1y;
        # add_header Cache-Control "public, immutable";
    }

    # Default: proxy everything to SSR app
    location / {
        proxy_set_header Host $host;
        proxy_set_header X-Real-IP $remote_addr;
        proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
        proxy_set_header X-Forwarded-Proto $scheme;
        proxy_pass http://127.0.0.1:4000;
        proxy_redirect off;
    }

    # Optional: if you want to proxy API via the same vhost (uncomment and adjust)
    # location /api/ {
    #     proxy_set_header Host $host;
    #     proxy_set_header X-Real-IP $remote_addr;
    #     proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    #     proxy_set_header X-Forwarded-Proto $scheme;
    #     proxy_pass https://api.tsinit.com/api/;
    # }
}
