version: '3.9'

# Compose de despliegue basado en im√°genes preconstruidas en CI/CD.
# Requiere variables BACKEND_IMAGE y FRONTEND_IMAGE (por ejemplo, de .env.deploy).

services:
  db:
    image: postgres:16-alpine
    restart: unless-stopped
    env_file:
      - .env
    environment:
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
      POSTGRES_DB: ${POSTGRES_DB:-cms}
    volumes:
      - db-data:/var/lib/postgresql/data
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U ${POSTGRES_USER:-postgres}']
      interval: 5s
      timeout: 5s
      retries: 10

  backend:
    image: ${BACKEND_IMAGE}
    restart: unless-stopped
    depends_on:
      db:
        condition: service_healthy
    env_file:
      - .env
    environment:
      DATABASE_URL: postgresql://${POSTGRES_USER:-postgres}:${POSTGRES_PASSWORD:-postgres}@db:5432/${POSTGRES_DB:-cms}?schema=public
      NODE_ENV: production
      UPLOADS_DIR: /app/uploads
    ports:
      - '127.0.0.1:3000:3000'
    volumes:
      - uploads-data:/app/uploads
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:3000/api/health || exit 1']
      interval: 10s
      timeout: 5s
      retries: 12

  frontend:
    image: ${FRONTEND_IMAGE}
    restart: unless-stopped
    depends_on:
      backend:
        condition: service_healthy
    env_file:
      - .env
    environment:
      API_URL: ${API_URL:-http://backend:3000/api}
      NODE_ENV: production
    ports:
      - '127.0.0.1:4000:4000'
    healthcheck:
      test: ['CMD-SHELL', 'curl -f http://localhost:4000/ || exit 1']
      interval: 10s
      timeout: 5s
      retries: 12

volumes:
  db-data:
  uploads-data:

# deploy trigger 2025-09-06 05:23:20 UTC
